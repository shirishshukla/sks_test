---
​
##
# Description:
##
​
## Variables
variables:
  K8S_DIR: "${CI_PROJECT_DIR}/k8s"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  APP_NAME: BulkWeather
  EKSCLUSTER: Dev_Eks_Cluster
  KUBECONFIG: /etc/k8sconfig
  REGION: us-west-1
  DEPL_TMPLFILE: deployment.tmpl.yml
  DEPLFILE: deployment.yaml
  SECRET_NAME: gitlab-registry-secret
  DOCKER_HOST: tcp://mydockerhost:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
​
​
# Environment specific variable setup
.set_env: &set_env
  environment:
    name: deployment
  variables:
    env_tag: test
    namespace: dep-test
​
​
# Common Task properties
.common_config: &common_config
  only:
    - main   # only to run for this branch
​
# container registry login and build new image
.docker_login: &docker_login |
    echo Docker Login
    echo "${CI_REGISTRY_PASSWORD}"  | docker login -u $CI_REGISTRY_USER --password-stdin  $CI_REGISTRY
    echo done

.build_image: &build_image |
    echo "Building container image $IMAGE_TAG"
    cd ${CI_PROJECT_DIR}
    docker build -t $IMAGE_TAG .
    docker push $IMAGE_TAG
    docker images​

# setup kubectl and k8s auth
.set_kubeconfig: &set_kubeconfig |
    echo Version of awscli...
    aws --version
    echo  Download kubectl binary...
    curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x kubectl
    mv kubectl /usr/local/bin/
    echo setting k8s config...
    echo * setup eks cluster auth *
    aws sts get-caller-identity
    aws eks update-kubeconfig --name $EKSCLUSTER --region $REGION --kubeconfig $KUBECONFIG
    echo xxxxxxxxxxxxxxxx
    cat -n $KUBECONFIG
    echo xxxxxxxxxxxxxxxx
    kubectl config view
    kubectl version
    # create secrets
    kubectl create secret docker-registry SECRET_NAME --docker-server=$CI_REGISTRY --docker-username=$CI_REGISTRY_USER --docker-password=$CI_REGISTRY_PASSWORD || true
​    echo done..
​

# create deployment file
.create_depfile: &create_depfile |
    echo xxxx Creating deployment file xxxx
    cd ${K8S_DIR}
    cp $DEPL_TMPLFILE $DEPLFILE
    sed -i "s|{{NAMESPACE}}|${namespace}|g" $DEPLFILE
    sed -i "s|{{APP_NAME}}|${APP_NAME}|g" $DEPLFILE
    sed -i "s|{{CONTAINER_IMAGE}}|${IMAGE_TAG}|g" $DEPLFILE
    sed -i "s|{{SECRET_NAME}}|${SECRET_NAME}|g" $DEPLFILE
    echo done..

​
# set namespace to current context
.set_namespace: &set_namespace |
    echo Setting default namespace to $namespace
    kubectl config set-context --current --namespace=$namespace
    echo done..
​
​
## **** Stages **** ##
#.initialize: &initialize
#  stage: initialize
#  <<: *set_env
#  <<: *common_config
#  script:
#    - *set_kubeconfig
​
​
# Validate K8s auth
.validate: &validate
  stage: validate
  <<: *set_env
  <<: *common_config
  script:
    - *set_kubeconfig
    - *create_depfile
    - cd ${K8S_DIR}
    - kubectl get namespaces && echo kubectl auth working ... || (echo "FAIL - kubectl auth failed." && exit 1)
    - echo Below deployment to be created ...
    - echo xxxxxxxxxxxxxxxx deployment file xxxxxxxxxxxxxxxx
    - cat -n $DEPLFILE
    - echo xxxxxxxxxxxxxxxx END xxxxxxxxxxxxxxxx
    - echo Validate deployment file $DEPLFILE ...
    - kubectl apply -f $DEPLFILE --dry-run=client -n $namespace
​
​
# build and push docker image
.build: &build
  stage: build
  image: docker:19.03.12
​  services:
   - name: docker:dind
     alias: mydockerhost
  <<: *set_env
  <<: *common_config
  script:
    - *docker_login
    - *build_image
​

# create namespace and apply manifest
.deploy: &deploy
  stage: deploy
  <<: *set_env
  <<: *common_config
  script:
    - *set_kubeconfig
    - *create_depfile
    - echo create namespace if not exist ...
    - kubectl get namespaces
    - kubectl describe namespace $namespace || kubectl create namespace $namespace
    - kubectl get namespaces $namespace || (echo namespace $namespace not exist && exit 1)
    - *set_namespace
    - cd ${K8S_DIR}
    - kubectl apply -f $DEPLFILE
​
​
# test
.test: &test
  stage: test
  <<: *set_env
  <<: *common_config
  script:
    - *set_kubeconfig
    - *set_namespace
    - cd ${K8S_DIR}
    - echo Validating pod
    - kubectl get pods | grep ${APP_NAME}

​
# destroy
.destroy: &destroy
  stage: cleanup
  <<: *set_env
  <<: *common_config
  when: manual
  script:
    - *set_kubeconfig
    - *create_depfile
    - *set_namespace
    - cd ${K8S_DIR}
    - echo Deleting deployment cleanup ...
    - kubectl delete -f $DEPLFILE
    - echo Cleanup is successfull ..
​
## END
